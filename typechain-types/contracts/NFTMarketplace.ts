/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface NFTMarketplaceInterface extends utils.Interface {
  functions: {
    "AUCTION_DURATION()": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "auctionsCount()": FunctionFragment;
    "buyItem(uint256)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "createItem(string)": FunctionFragment;
    "createItem(uint256,string)": FunctionFragment;
    "erc1155Token()": FunctionFragment;
    "erc721Token()": FunctionFragment;
    "finishAuction(uint256)": FunctionFragment;
    "listItem(uint256,uint256)": FunctionFragment;
    "listItem(uint256,uint256,uint256)": FunctionFragment;
    "listItemOnAuction(uint256,uint256,uint256)": FunctionFragment;
    "listItemOnAuction(uint256,uint256)": FunctionFragment;
    "makeBid(uint256,uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "payToken()": FunctionFragment;
    "sales(uint256)": FunctionFragment;
    "salesCount()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AUCTION_DURATION"
      | "auctions"
      | "auctionsCount"
      | "buyItem"
      | "cancel"
      | "createItem(string)"
      | "createItem(uint256,string)"
      | "erc1155Token"
      | "erc721Token"
      | "finishAuction"
      | "listItem(uint256,uint256)"
      | "listItem(uint256,uint256,uint256)"
      | "listItemOnAuction(uint256,uint256,uint256)"
      | "listItemOnAuction(uint256,uint256)"
      | "makeBid"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "payToken"
      | "sales"
      | "salesCount"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AUCTION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createItem(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createItem(uint256,string)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "erc1155Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listItem(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listItem(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listItemOnAuction(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listItemOnAuction(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "payToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "sales", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "salesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUCTION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createItem(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createItem(uint256,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc1155Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listItem(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listItem(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listItemOnAuction(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listItemOnAuction(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sales", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "salesCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export interface NFTMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUCTION_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        buyer: string;
        bidsCount: BigNumber;
        amount: BigNumber;
        finishTime: BigNumber;
      }
    >;

    auctionsCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    buyItem(
      saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createItem(string)"(
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createItem(uint256,string)"(
      amount: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    erc1155Token(overrides?: CallOverrides): Promise<[string]>;

    erc721Token(overrides?: CallOverrides): Promise<[string]>;

    finishAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "listItem(uint256,uint256)"(
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "listItem(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      price: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "listItemOnAuction(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "listItemOnAuction(uint256,uint256)"(
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeBid(
      auctionId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payToken(overrides?: CallOverrides): Promise<[string]>;

    sales(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        tokenId: BigNumber;
        price: BigNumber;
        amount: BigNumber;
        seller: string;
      }
    >;

    salesCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  auctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber, BigNumber, BigNumber] & {
      tokenId: BigNumber;
      price: BigNumber;
      seller: string;
      buyer: string;
      bidsCount: BigNumber;
      amount: BigNumber;
      finishTime: BigNumber;
    }
  >;

  auctionsCount(overrides?: CallOverrides): Promise<BigNumber>;

  buyItem(
    saleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    saleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createItem(string)"(
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createItem(uint256,string)"(
    amount: BigNumberish,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  erc1155Token(overrides?: CallOverrides): Promise<string>;

  erc721Token(overrides?: CallOverrides): Promise<string>;

  finishAuction(
    auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "listItem(uint256,uint256)"(
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "listItem(uint256,uint256,uint256)"(
    tokenId: BigNumberish,
    price: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "listItemOnAuction(uint256,uint256,uint256)"(
    tokenId: BigNumberish,
    minPrice: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "listItemOnAuction(uint256,uint256)"(
    tokenId: BigNumberish,
    minPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeBid(
    auctionId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payToken(overrides?: CallOverrides): Promise<string>;

  sales(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      tokenId: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      seller: string;
    }
  >;

  salesCount(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        buyer: string;
        bidsCount: BigNumber;
        amount: BigNumber;
        finishTime: BigNumber;
      }
    >;

    auctionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    buyItem(saleId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancel(saleId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "createItem(string)"(
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createItem(uint256,string)"(
      amount: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    erc1155Token(overrides?: CallOverrides): Promise<string>;

    erc721Token(overrides?: CallOverrides): Promise<string>;

    finishAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "listItem(uint256,uint256)"(
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "listItem(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      price: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "listItemOnAuction(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "listItemOnAuction(uint256,uint256)"(
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeBid(
      auctionId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    payToken(overrides?: CallOverrides): Promise<string>;

    sales(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        tokenId: BigNumber;
        price: BigNumber;
        amount: BigNumber;
        seller: string;
      }
    >;

    salesCount(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    auctionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    buyItem(
      saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createItem(string)"(
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createItem(uint256,string)"(
      amount: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    erc1155Token(overrides?: CallOverrides): Promise<BigNumber>;

    erc721Token(overrides?: CallOverrides): Promise<BigNumber>;

    finishAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "listItem(uint256,uint256)"(
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "listItem(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      price: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "listItemOnAuction(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "listItemOnAuction(uint256,uint256)"(
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeBid(
      auctionId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payToken(overrides?: CallOverrides): Promise<BigNumber>;

    sales(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    salesCount(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUCTION_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyItem(
      saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createItem(string)"(
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createItem(uint256,string)"(
      amount: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    erc1155Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc721Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finishAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "listItem(uint256,uint256)"(
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "listItem(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      price: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "listItemOnAuction(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "listItemOnAuction(uint256,uint256)"(
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeBid(
      auctionId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sales(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    salesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
